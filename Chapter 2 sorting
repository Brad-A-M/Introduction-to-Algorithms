#Generate a vector of 10 random integers between 0 to 100
x<-floor(runif(10,min=0, max=101))

#Insertion sort. From pseudocode on page 18. This prints each step.
for(j in 2:length(x)){n=x[j]; i=j-1; while(i>0 && x[i]>n){x[i+1]=x[i]; i=i-1; x[i+1]=n}; print (x)}

#Makes a matrix then merges row by row
#merge sort. Merges two already sorted lists into a sorted list.
x<-floor(runif(2^4,min=0, max=101));#gernerate a random list of 16 integers

p=log(length(x),2);
print(p)

m <- array(, c((p+1),length(x)))


#Input two sorted lists and out puts the merged sorted list
merge<-function(L,R){
  
  L<-c(L,Inf);
  R<-c(R,Inf);
  
  S<-c();
  n=length(L)+length(R)-1;i=1;j=1;
  
  for(k in 1:n){
    if(L[i]<=R[j]){S<-c(S,L[i]);i=i+1;}
    else{S<-c(S,R[j]);j=j+1;}}
  
  S<-S[c(1:(length(S)-1))]
  
  return(S)
  
}#endmerge
#assign row one to be values of array
for(i in 1:length(x)){
  m[1,i]<-x[i];
}
#assign row two to be values of above sorted 2 deep
for(i in seq(1,length(x),2)){
  
  m[2,i:(i+1)]<-c(merge(x[i],x[i+1]));
}

for(j in 2:(p)){
  for(i in seq(1,length(x),2^j)){
    
    m[(j+1),i:(i+(2^j-1))]<-c(merge(m[j,i:(i+2^(j-1)-1)],m[j,(i+2^(j-1)):(i+2^j-1)]));
  }
  
  
}


print(m[])

print(m[2,1:length(x)])
print(m[3,1:length(x)])
print(m[4,1:length(x)])
print(m[5,1:length(x)])


#A better version make it a function
x<-floor(runif(2^4,min=0, max=101));#gernerate a random list of 16 integers
print(x)

mergesort<-function(x){

p=log(length(x),2);


m <- array(, c((p+1),length(x)))


#Input two sorted lists and out puts the merged sorted list
merge<-function(L,R){
  
  L<-c(L,Inf);
  R<-c(R,Inf);
  
  S<-c();
  n=length(L)+length(R)-1;i=1;j=1;
  
  for(k in 1:n){
    if(L[i]<=R[j]){S<-c(S,L[i]);i=i+1;}
    else{S<-c(S,R[j]);j=j+1;}}
  
  S<-S[c(1:(length(S)-1))]
  
  return(S)
  
}#endmerge
#assign row one to be values of array
for(i in 1:length(x)){
  m[1,i]<-x[i];
}
#assign row two to be values of above sorted 2 deep
for(i in seq(1,length(x),2)){
  
  m[2,i:(i+1)]<-c(merge(x[i],x[i+1]));
}

for(j in 2:(p)){
  for(i in seq(1,length(x),2^j)){
    
    m[(j+1),i:(i+(2^j-1))]<-c(merge(m[j,i:(i+2^(j-1)-1)],m[j,(i+2^(j-1)):(i+2^j-1)]));
  }
  
  
}

return(m[(p+1),1:length(x)])

}#endmergesortfuction





print(mergesort(x))
print(x)
#End better version


#merge sort a vector of any length by appending 0's if needed.


mergesortanylength<-function(x){
  
  p=log(length(x),2);

if(p==floor(p)){return(mergesort(x))} else{
  
  r<-2^(floor(p)+1)-length(x);

  a<- array(0,c(1,r));
  t<- c(a,x);
  w<-mergesort(t);
  b<-w[c((r+1):length(t))];
  return(b)
  
}

}
#end of merge sort any length
