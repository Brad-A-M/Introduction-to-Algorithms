#Find the closest pair in O(n^2)

A<-sample(1:8,8,replace=F); #Generates 1,2,,,,n in arbitrary order
n=length(A);
r=((n*(n-2)/8));


m <- array(, c(r,5));

#turns A into length(A)/2 tuples
for(i in seq(1,length(A),2)){
  assign(paste("P", ((i+1)/2), sep = ""), c(A[i],A[i+1]))
  
}


d<-function(P,Q){
  
  d=((P[1]-Q[1])^2+(P[2]-Q[2])^2)^.5
  
  return(d)
}

k=1;
u=Inf;#Keep track of the minimum
w=Inf;#Keep track of the row with the minimum distance

#computes the pairwise distance
for(i in 1:(((length(A))/2)-1)){
  
  for(j in (i+1):(length(A)/2)){
    
    
    m[k,1]=get(paste("P",i,sep=""))[1]; m[k,2]=get(paste("P",i,sep=""))[2];
    m[k,3]=get(paste("P",j,sep=""))[1]; m[k,4]=get(paste("P",j,sep=""))[2];
    m[k,5]=d(get(paste("P",i,sep="")),get(paste("P",j,sep="")));
    
    
    if(d(get(paste("P",i,sep="")),get(paste("P",j,sep="")))< u){
      u = d(get(paste("P",i,sep="")),get(paste("P",j,sep="")));#keep track of the min and the row it is in
    w=k};
    
    k=k+1;  
    
  }
  
  
}
print(A)

print(m)


print(w)
print(u)
print(m[w,1:4])

######################################################################

#Enter an array think of it at [(x1,y1),(x2,y2),...,(xn,yn)] the functions sortbyx(A) and
#sortybyy(A) do what you think they would do in O(nlog(n)).

A<-sample(1:16,16,replace=F); #Generates 1,2,,,,n in arbitrary order


#Sort by x
sortbyx<-function(A){


n=length(A);
r=((n*(n-2)/8));
p=log(length(A),2);
g <- array(, c(p,n));#g for garage for storage


#Input two sorted lists and out puts the merged sorted list by two
mergebytwox<-function(L,R){
  
  L<-c(L,Inf);
  R<-c(R,Inf);
  
  S<-c();
  n=(length(R)+length(L))/2-1;i=1;j=1;#messing with minus here
  
  for(k in 1:(n)){#messing with minus here
    if(L[i] <= R[j]){
      S<-c(S,L[i],L[i+1])
      i=i+2
    } else {
      S<-c(S,R[j],R[j+1])
      j=j+2
    }
    k=k+1;
  }
  
  S<-S[c(1:(length(S)))]
  
  return(S)
  
}#endmergebytwox

#assign row one to be values of array
for(i in 1:length(A)){
  g[1,i]<-A[i];
}



for(k in 2:p){

  for(i in seq(1,length(A),2^k)){
  
  g[k,i:(i+2^k-1)]<-c(mergebytwox(g[(k-1),i:(i+2^(k-1)-1)],g[(k-1),(i+2^(k-1)):(i+2^k-1)]));
  }
  
  
}
return(g[p,1:length(A)])

}#end merge by x

print(A)
print(sortbyx(A))

#sort by y

A<-sample(1:16,16,replace=F); #Generates 1,2,,,,n in arbitrary order



sortbyy<-function(A){

n=length(A);
r=((n*(n-2)/8));
p=log(length(A),2);
g <- array(, c(p,n));#g for garage for storage


#Input two sorted lists and out puts the merged sorted list by two
mergebytwoy<-function(L,R){
  
  L<-c(L,Inf,Inf);
  R<-c(R,Inf,Inf);
  
  S<-c();
  n=(length(R)+length(L))/2-1;i=2;j=2;#messing with minus here
  
  for(k in 1:(n)){#messing with minus here
    if(L[i] <= R[j]){
      S<-c(S,L[i-1],L[i])
      i=i+2
    } else {
      S<-c(S,R[j-1],R[j])
      j=j+2
    }
    k=k+1;
  }
  
  S<-S[c(1:(length(S)-2))]
  
  return(S)
  
}#endmergebytwoy

#assign row one to be values of array
for(i in 1:length(A)){
  g[1,i]<-A[i];
}



for(k in 2:p){
  
  for(i in seq(1,length(A),2^k)){
    
    g[k,i:(i+2^k-1)]<-c(mergebytwoy(g[(k-1),i:(i+2^(k-1)-1)],g[(k-1),(i+2^(k-1)):(i+2^k-1)]));
  }
  
  
}

return(g[p,1:length(A)])

}
print(A)
print(sortbyx(A))
print(sortbyy(A))

######################################################

#addzeros function amends zeros the beginning of an array unit the 
#length of the array is a power of 2.
addzeros<-function(A){
  
  n=length(A);
  p=log(n,2);
  

  
  while(p != floor(p)){
    
    A<-c(0,A);
    n=length(A);
    p=log(n,2);
  
  }
  
  return(A)
  
  
}#endaddzeros


#####################################################

#sort any even length array by the y values by appending zeros to the front then sorting using above

##############################################################
#addzeros function amends zeros the beginning of an array unit the 
#length of the array is a power of 2.
addzeros<-function(A){
  
  n=length(A);
  p=log(n,2);
  z=0;
  
  
  while(p != floor(p)){
    
    A<-c(0,A);
    n=length(A);
    p=log(n,2);
    z=z+1;
  }
  
  A<-c(z,A)
  
  return(A)
  
  
}#endaddzeros

sortanylengthy<-function(A){
  
  B=addzeros(A);
  z=B[1];
  C=sortbyy(B[2:length(B)]);
  return(C[(z+1):length(C)])
  
}#endsortanylengthy

################################################################################################

